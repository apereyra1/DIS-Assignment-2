using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Assignment2_Fall20
{
    class Program
    {


        static void Main(string[] args)
        {
            Console.WriteLine("Question 1");
            int n = 7;
            PrintPatternAnyComplexity(n);
            PrintPatternLinearComplexity(n);


            Console.WriteLine("Question 2");
            int[] array1 = new int[] { 1, 3, 5, 4, 7 };
            int result = LongestSubSeq(array1);
            Console.WriteLine(result);
          

            Console.WriteLine("Question 3");
            int[] array2 = new int[] { 1, 2, 3, 4, 5, 5 };
            PrintTwoParts(array2);


            Console.WriteLine("Question 4");
            int[] array3 = new int[] { -4, -1, 0, 3, 10 };
            int[] result2 = SortedSquares(array3);
            //code to print the result array here
           

            Console.WriteLine("Question 5");
            int[] nums1 = { 4, 2, 2, 4 };
            int[] nums2 = { 2, 2 };
            int[] intersect1 = Intersect(nums1, nums2);

            //Write code to print the result array here
            {
               
            }
            Console.WriteLine("Question 6");
            int[] arr = new int[] { 1, 2, 2, 1, 1, 3 };
            Console.WriteLine(UniqueOccurrences(arr));

            Console.WriteLine("Question 7");
            int[] numbers = { 0, 1, 3, 50, 75 };
             int lower = 0;
             int upper = 99;
            
            //Write code to print list here
            

            Console.WriteLine("Question 8");
            string[] names = new string[] { "pes", "fifa", "gta", "pes(2019)" };
            string[] namesResult = UniqFolderNames(names);
            //Write code to print your result here


        }

        public static void PrintPatternAnyComplexity(int n)

        {
            try
            {
            
                int i, j, k;
                for (i = 1; i <= n; i++)
                {
                    for (j = 1; j <= i; j++)
                    {
                        Console.Write("");
                    }
                    for (k = 1; k <= i; k++)
                    {
                        Console.Write("*");
                    }
                    Console.WriteLine("");
                }
                Console.ReadLine();
            }
            catch (Exception)
            {

                throw;
            }

        }
        public static void PrintPatternLinearComplexity(int n)

        {
            try
            {
                Console.WriteLine("Please input: ");
                n = Convert.ToInt32(Console.ReadLine());
                for (int i = 1; i <= n; i++)
                {
                    Console.WriteLine(new String('*', i));
                }
                Console.ReadLine();
            }
            catch (Exception)
            {

                throw;
            }

        }


        public static int LongestSubSeq(int[] nums)
        {
            try
            {
                int n = nums.Length;



                int max = 1, len = 1;



                for (int i = 1; i < n; i++)
                {



                    if (nums[i] > nums[i - 1])
                        len++;
                    else
                    {
                        if (max < len)
                            max = len;



                        len = 1;
                    }
                }
                if (max < len)
                    max = len;
                return max;
            }
            catch (Exception)
            {

                throw;
            }
            return 0;
        }
        public static void PrintTwoParts(int[] array2)
        {
            try
            {
                //Write your code here;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public static int[] SortedSquares(int[] A)
        {
            try
            {
                int n = A.Length;

                // First convert each array 
                // elements into its square 
                for (int i = 0; i < n; i++)
                    A[i] = A[i] * A[i];

                // Sort an array using 
                // "inbuild sort function" 
                // in Arrays class. 
                Array.Sort(A);

                for (int i = 0; i < n; i++)
                {
                    Console.WriteLine(A[i] + " ");
                }
            }
            catch (Exception)
            {

                throw;
            }
            return null;
        }
        public static int[] Intersect(int[] nums1, int[] nums2)
        {
            try
            {

                HashSet<int> hs = new HashSet<int>();

                for (int i = 0; i < nums1.Length; i++)
                    hs.Add(nums1[i]);

                for (int i = 0; i < nums2.Length; i++)
                    if (hs.Contains(nums2[i]))
                        Console.WriteLine(nums2[i] + " ");

            }
            catch
            {
                throw;
            }

            return new int[] { };
        }


        public static bool UniqueOccurrences(int[] arr)
        {
            try
            {
                return arr.GroupBy(x => x).GroupBy(x => x.Count()).All(x => x.Count() == 1);
            }
            catch (Exception)
            {

                throw;
            }   
        }
        public List<String> Ranges(int[] numbers, int lower, int upper)
        {
            List<String> ResultList = Ranges(numbers, lower, upper);
            try
            {
                int next = lower;
                for (int i = 0; i < numbers.Length; i++)
                {
                    if (lower == Int32.MaxValue) 
                        return ResultList;

                    if (numbers[i] < next)
                    {
                        continue;
                    }
                    if (numbers[i] == next)
                    {
                        next++;
                        continue;
                    }
                    ResultList.GetRange(next, numbers[i] - 1);
                 
                    if (numbers[i] == Int32.MaxValue) return ResultList;
                    next = numbers[i] + 1;
                }

                if (next <= upper)
                {
                    ResultList.GetRange(next,upper);
                }
                return ResultList;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public static string[] UniqFolderNames(string[] names)
        {
            try
            {
                //Write Your Code Here
            }
            catch (Exception)
            {

                throw;
            }
            return default;
        }

    }
}
